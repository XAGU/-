apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.archinamon.aspectj'
apply from: '../buildsystem/quality.gradle'
apply from: '../buildsystem/dependencies.gradle'

// 加载 local.properties 资源
Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream() ;
properties.load( inputStream )

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "com.xiaolian.amigo"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 5
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    signingConfigs {
        config {
            keyAlias 'android_amigo'
            keyPassword properties.getProperty('keyPassword')
            storeFile file('../android_amigo.jks')
            storePassword properties.getProperty('storePassword')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }

        release {
            signingConfig signingConfigs.config
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 批量打包
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
//                    def fileName = "${variant.productFlavors[0].name}_v${defaultConfig.versionName}_${releaseTime()}.apk"
                    def fileName = "${variant.productFlavors[0].applicationId}_${defaultConfig.versionName}.apk"
                    output.outputFileName = fileName
                }
            }
        }
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            // 包名
            applicationId "com.xiaolian.amigo_dev"
            // 动态添加 string.xml 字段；
            resValue "string", "app_name", "笑联测试版"
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"dev"'
            buildConfigField "String", "SERVER", "\"http://116.62.236.67:5081/\""
            buildConfigField "String", "H5_SERVER", "\"https://c.h5.xiaolian365.com/\""
            buildConfigField "String", "FILE_PREFIX", "\"https://s.xiaolian365.com/\""
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "dev",
                                    FILE_PROVIDER_AUTHORITIES: applicationId + ".fileprovider"]
        }
        prod {
            applicationId defaultConfig.applicationId

            resValue "string", "app_name", "笑联"

            buildConfigField "String", "ENVIRONMENT", '"prod"'
//            buildConfigField "String", "SERVER", "\"https://c.api.xiaolian365.com/\""
//            buildConfigField "String", "H5_SERVER", "\"https://c.h5.xiaolian365.com/\""
//            buildConfigField "String", "FILE_PREFIX", "\"https://s.xiaolian365.com/\""

            buildConfigField "String", "SERVER", "\"https://api.xiaolian365.com/c/\""
            buildConfigField "String", "H5_SERVER", "\"https://h5.xiaolian365.com/c/\""
            buildConfigField "String", "FILE_PREFIX", "\"https://s.xiaolian365.com/\""

            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "prod",
                                    FILE_PROVIDER_AUTHORITIES: applicationId + ".fileprovider"]
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.swipelayout
    implementation deps.support.v4
    implementation deps.support.annotations
    implementation deps.support.appCompat
    implementation deps.support.recyclerView
    implementation deps.support.design
    implementation deps.support.supportVectorDrawable
    implementation deps.support.animatedVectorDrawable

    implementation deps.multidex

    implementation deps.baseRvadapter
    implementation deps.smartrefresh
    implementation deps.banner

    implementation deps.glide
    implementation deps.ucrop
    implementation deps.overscroll
    implementation deps.circleimageview
    implementation deps.gifDrawable
    implementation deps.wheelPicker

    implementation deps.eventbus

    implementation deps.rxpermissions

    implementation deps.gson

    implementation deps.retrofit.core
    implementation deps.retrofit.gson
    implementation deps.retrofit.rxjava

    implementation deps.okhttp.core
    implementation deps.okhttp.logger
    implementation deps.okio

    implementation deps.dagger2.runtime
    annotationProcessor deps.dagger2.compiler
    testAnnotationProcessor deps.dagger2.compiler
    androidTestAnnotationProcessor deps.dagger2.compiler

    implementation deps.rx.core
    implementation deps.rx.android
    implementation deps.rx.rxandroidble
    implementation deps.rx.rxlifecycle
    implementation deps.rx.rxlifecycleComponents

    implementation deps.butterKnife.runtime
    annotationProcessor deps.butterKnife.compiler

    compileOnly deps.lombok
    annotationProcessor deps.lombok

    testImplementation deps.junit

    implementation deps.umeng

    implementation deps.oss

//    implementation deps.acra
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            // Force all of the primary support libraries to use the same version.
            if (details.requested.group == 'com.android.support'
                    && details.requested.name != 'multidex'
                    && details.requested.name != 'multidex-instrumentation') {
                details.useVersion versions.supportLibrary
            }
            // Force all the error-prone dependencies to use the same version.
            if (details.requested.group == 'com.google.errorprone'
                    && details.requested.name.startsWith('error_prone_')) {
                details.useVersion versions.errorProne
            }
        }
    }
}
